# Production Dockerfile for Spin-Torque RL-Gym
# Multi-stage build for optimized production image

# Stage 1: Build stage
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION=1.0.0
ARG VCS_REF

# Metadata
LABEL maintainer="Terragon Labs <support@terragonlabs.com>" \
      version="${VERSION}" \
      description="Production Spin-Torque RL-Gym Environment" \
      org.label-schema.build-date="${BUILD_DATE}" \
      org.label-schema.name="spin-torque-rl-gym" \
      org.label-schema.version="${VERSION}" \
      org.label-schema.vcs-ref="${VCS_REF}" \
      org.label-schema.vendor="Terragon Labs" \
      org.label-schema.schema-version="1.0"

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc \
    g++ \
    gfortran \
    libblas-dev \
    liblapack-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Create application directory
WORKDIR /app

# Copy dependency files
COPY pyproject.toml setup.py README.md ./
COPY spin_torque_gym/__init__.py ./spin_torque_gym/

# Create virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install build dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Install Python dependencies
RUN pip install --no-cache-dir -e .[viz,jax]

# Stage 2: Production stage
FROM python:3.11-slim as production

# Set production environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    SPIN_TORQUE_ENV=production \
    SPIN_TORQUE_LOG_LEVEL=INFO \
    SPIN_TORQUE_OPTIMIZATION_LEVEL=aggressive \
    SPIN_TORQUE_ENABLE_VECTORIZATION=true \
    SPIN_TORQUE_MAX_WORKERS=8 \
    SPIN_TORQUE_CACHE_SIZE=5000

# Install runtime dependencies only
RUN apt-get update && apt-get install -y --no-install-recommends \
    libblas3 \
    liblapack3 \
    libgomp1 \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create non-root user for security
RUN groupadd -r spinuser && useradd -r -g spinuser -d /app -s /bin/bash spinuser

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=spinuser:spinuser spin_torque_gym/ ./spin_torque_gym/
COPY --chown=spinuser:spinuser examples/ ./examples/
COPY --chown=spinuser:spinuser config/ ./config/
COPY --chown=spinuser:spinuser pyproject.toml setup.py ./

# Create necessary directories
RUN mkdir -p /app/logs /app/data /app/cache \
    && chown -R spinuser:spinuser /app

# Copy production scripts
COPY --chown=spinuser:spinuser scripts/entrypoint.prod.sh /entrypoint.sh
COPY --chown=spinuser:spinuser scripts/healthcheck.py /healthcheck.py

# Make scripts executable
RUN chmod +x /entrypoint.sh /healthcheck.py

# Install the package in the production environment
RUN pip install --no-cache-dir -e .

# Switch to non-root user
USER spinuser

# Expose application port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python /healthcheck.py

# Set entry point
ENTRYPOINT ["/entrypoint.sh"]

# Default command
CMD ["python", "-m", "spin_torque_gym.cli", "--host", "0.0.0.0", "--port", "8000"]