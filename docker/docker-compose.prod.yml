version: '3.8'

# Production Docker Compose configuration
# Optimized for performance, security, and reliability

services:
  #============================================================================
  # Main Application (Production Optimized)
  #============================================================================
  app:
    build:
      context: ..
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-0.1.0}
    image: spin-torque-rl-gym:${VERSION:-latest}
    container_name: spin-torque-rl-gym-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - LOG_LEVEL=INFO
      - RANDOM_SEED=${RANDOM_SEED:-42}
      - ENABLE_VISUALIZATION=false
      - NUM_CORES=${NUM_CORES:-0}
      - GPU_DEVICE_ID=${GPU_DEVICE_ID:--1}
      - POSTGRES_URL=postgresql://${POSTGRES_USER:-spin_torque_user}:${POSTGRES_PASSWORD:-spin_torque_pass}@postgres:5432/${POSTGRES_DB:-spin_torque_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-spin_torque_redis}@redis:6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - app-data:/app/data
      - app-results:/app/results
      - app-models:/app/models
      - app-logs:/app/logs
    ports:
      - "${APP_PORT:-8080}:8080"
    networks:
      - spin-torque-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import spin_torque_gym; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '2.0'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  #============================================================================
  # Load Balancer (Nginx)
  #============================================================================
  nginx:
    image: nginx:alpine
    container_name: spin-torque-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - spin-torque-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3

  #============================================================================
  # Database (Production PostgreSQL)
  #============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: spin-torque-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-spin_torque_db}
      - POSTGRES_USER=${POSTGRES_USER:-spin_torque_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-spin_torque_pass}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - postgres-logs:/var/log/postgresql
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c log_destination=stderr
      -c logging_collector=on
      -c log_directory=/var/log/postgresql
      -c log_filename=postgresql-%Y-%m-%d_%H%M%S.log
    networks:
      - spin-torque-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-spin_torque_user} -d ${POSTGRES_DB:-spin_torque_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  #============================================================================
  # Redis (Production Configuration)
  #============================================================================
  redis:
    image: redis:7-alpine
    container_name: spin-torque-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD:-spin_torque_redis}
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis-data:/data
      - redis-logs:/var/log/redis
    networks:
      - spin-torque-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  #============================================================================
  # MLflow Tracking Server (Production)
  #============================================================================
  mlflow:
    image: python:3.11-slim
    container_name: spin-torque-mlflow-prod
    restart: unless-stopped
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://${POSTGRES_USER:-spin_torque_user}:${POSTGRES_PASSWORD:-spin_torque_pass}@postgres:5432/${POSTGRES_DB:-spin_torque_db}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
      - MLFLOW_SERVER_HOST=0.0.0.0
      - MLFLOW_SERVER_PORT=5000
    volumes:
      - mlflow-artifacts:/mlflow/artifacts
      - mlflow-logs:/var/log/mlflow
    networks:
      - spin-torque-network
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "
        pip install mlflow psycopg2-binary &&
        mlflow server 
        --backend-store-uri postgresql://${POSTGRES_USER:-spin_torque_user}:${POSTGRES_PASSWORD:-spin_torque_pass}@postgres:5432/${POSTGRES_DB:-spin_torque_db}
        --default-artifact-root /mlflow/artifacts
        --host 0.0.0.0
        --port 5000
        --workers 4
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  #============================================================================
  # Monitoring (Prometheus)
  #============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: spin-torque-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - spin-torque-network

  #============================================================================
  # Monitoring (Grafana)
  #============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: spin-torque-grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - spin-torque-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  #============================================================================
  # Log Aggregation (Fluentd)
  #============================================================================
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: spin-torque-fluentd
    restart: unless-stopped
    volumes:
      - ./fluentd/fluent.conf:/fluentd/etc/fluent.conf:ro
      - fluentd-logs:/var/log/fluentd
      - app-logs:/var/log/app:ro
      - nginx-logs:/var/log/nginx:ro
      - postgres-logs:/var/log/postgresql:ro
    networks:
      - spin-torque-network
    depends_on:
      - app
      - postgres

#==============================================================================
# Networks
#==============================================================================
networks:
  spin-torque-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

#==============================================================================
# Volumes (Production Persistent Storage)
#==============================================================================
volumes:
  app-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./volumes/data}
  app-results:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${RESULTS_DIR:-./volumes/results}
  app-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MODELS_DIR:-./volumes/models}
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_DIR:-./volumes/logs}
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${POSTGRES_DATA_DIR:-./volumes/postgres}
  postgres-logs:
    driver: local
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${REDIS_DATA_DIR:-./volumes/redis}
  redis-logs:
    driver: local
  mlflow-artifacts:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MLFLOW_ARTIFACTS_DIR:-./volumes/mlflow}
  mlflow-logs:
    driver: local
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PROMETHEUS_DATA_DIR:-./volumes/prometheus}
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${GRAFANA_DATA_DIR:-./volumes/grafana}
  nginx-logs:
    driver: local
  fluentd-logs:
    driver: local